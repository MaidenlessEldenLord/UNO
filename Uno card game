import random

class Card:
    def __init__(self, color, value):
        self.color = color
        self.value = value
    
    def __str__(self):
        return f"{self.color} {self.value}"

class Deck:
    def __init__(self):
        self.cards = []
        self.colors = ['red', 'blue', 'green', 'yellow']
        self.values = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'skip', 'reverse', 'draw 2']
        self.special_cards = ['wild', 'wild draw 4']
        
        for color in self.colors:
            for value in self.values:
                self.cards.append(Card(color, value))
            for card in self.special_cards:
                self.cards.append(Card(color, card))
        
        self.shuffle()
    
    def shuffle(self):
        random.shuffle(self.cards)
    
    def draw_card(self):
        return self.cards.pop(0)

class Player:
    def __init__(self, name):
        self.name = name
        self.hand = []
    
    def __str__(self):
        return self.name
    
    def draw(self, deck):
        card = deck.draw_card()
        self.hand.append(card)
    
    def play_card(self, card_index, game):
        card = self.hand.pop(card_index)
        game.play_card(card)
    
    def can_play(self, top_card):
        for card in self.hand:
            if card.color == top_card.color or card.value == top_card.value:
                return True
            elif card.color == 'wild':
                return True
            elif card.color == 'wild draw 4':
                return True
        return False

class Game:
    def __init__(self):
        self.players = []
        self.deck = Deck()
        self.current_player_index = 0
        self.direction = 1
        self.top_card = None
        self.active_color = None
        self.game_over = False
    
    def add_player(self, player):
        self.players.append(player)
    
    def deal(self):
        for player in self.players:
            for i in range(7):
                player.draw(self.deck)
    
    def play_card(self, card):
        self.top_card = card
        if card.color != 'wild' and card.color != 'wild draw 4':
            self.active_color = card.color
        if card.value == 'skip':
            self.current_player_index += self.direction
            if self.current_player_index >= len(self.players):
                self.current_player_index = 0
            if self.current_player_index < 0:
                self.current_player_index = len(self.players) - 1
        elif card.value == 'reverse':
            self.direction *= -1
        elif card.value == 'draw 2':
            next_player_index = self.current_player_index + self.direction
            if next_player_index >= len(self.players):
                next_player_index = 0
            if next_player_index < 0:
                next_player_index = len(self.players) - 1
            self.players[next_player_index].draw(self.deck)
            self.players[next_player_index].draw(self.deck)
            self.current_player_index += self.direction
            if self.current_player_index >= len(self.players):
                self.current_player_index = 0
            if self.current_player_index < 0:
                self.current_player_index = len(self.players) - 1
        elif card.color == '

